import {Service} from "../types/servicesTypes.tsx";import {getToken} from "./jwt.tsx";export const getServices = async (): Promise<Service[]> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		try {		const response = await fetch(`${import.meta.env.VITE_API_URL}/services`, {			headers: {				'Authorization': `Bearer ${token}`			}		});				if (!response.ok) {			throw new Error(`HTTP error! status: ${response.status}`);		}				return response.json();	} catch (error) {		console.error('Failed to fetch services:', error);		throw error;	}};export const bookService = async (serviceName: string, reservationId: number): Promise<void> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		const response = await fetch(`${import.meta.env.VITE_API_URL}/services/book-service`, {		method: 'POST',		headers: {			'Content-Type': 'application/json',			'Authorization': `Bearer ${token}`		},		body: JSON.stringify({ serviceName, reservationId }),	});		if (!response.ok) {		const errorData = await response.text();		throw new Error(`Failed to book service: ${response.status} ${response.statusText}. ${errorData}`);	}};