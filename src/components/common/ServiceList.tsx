import React, { useState, useEffect } from 'react';import {Service} from "../../types/servicesTypes.tsx";import {getUserStatus} from "../../utils/jwt.tsx";import {getServices} from "../../utils/servicesUtils.tsx";import Header from "../layout/header/Header.tsx";import Footer from "../layout/Footer.tsx";const serviceIcons: { [key: string]: string } = {	CHECK_IN_CHECK_OUT: '🔑',	LUGGAGE_STORAGE: '🧳',	AIRPORT_TRANSFER: '🚗',	LOCAL_TOUR_GUIDE: '🗺️',	MEAL_DELIVERY: '🍽️',	HOUSEKEEPING: '🧹',	LAUNDRY_SERVICE: '🧺',	BIKE_RENTAL: '🚲',	CHILDCARE: '👶',	PET_SITTING: '🐾',	PROPERTY_PHOTOGRAPHY: '📸',	LISTING_OPTIMIZATION: '📊',	PRICE_MANAGEMENT: '💰',	GUEST_SCREENING: '🔍',	MAINTENANCE_COORDINATION: '🔧',	DEEP_CLEANING: '🧼',	TAX_PREPARATION: '📑',	INSURANCE_MANAGEMENT: '🛡️',	LEGAL_CONSULTATION: '⚖️',	MARKETING_BOOST: '📣'};const ServiceList: React.FC = () => {	const [services, setServices] = useState<Service[]>([]);	const [isRentor, setIsRentor] = useState(false);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);		useEffect(() => {		const fetchData = async () => {			try {				const userStatus = await getUserStatus();				setIsRentor(userStatus === 'RENTER');				const fetchedServices = await getServices();				setServices(fetchedServices);			} catch (err) {				setError('Failed to load services. Please try again later.');			} finally {				setIsLoading(false);			}		};		fetchData();	}, []);		if (isLoading) {		return (			<div className="flex justify-center items-center h-screen">				<div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>			</div>		);	}		if (error) {		return (			<div className="flex justify-center items-center h-screen">				<div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">					<strong className="font-bold">Error!</strong>					<span className="block sm:inline"> {error}</span>				</div>			</div>		);	}		const displayedServices = isRentor ? services.slice(-10) : services.slice(0, 10);		return (		<div className="flex flex-col min-h-screen bg-gray-100">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-4xl font-bold text-center mb-12 text-gray-800">Available Services</h1>				<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">					{displayedServices.map((service, index) => (						<div key={index} className="bg-white rounded-lg shadow-md p-6 transition duration-300 ease-in-out transform hover:scale-105">							<div className="flex items-center mb-4">								<span className="text-4xl mr-4">{serviceIcons[service.name] || '🔧'}</span>								<h2 className="text-xl font-semibold">{service.name.replace(/_/g, ' ')}</h2>							</div>							<p className="text-gray-600">Price: {service.price}</p>						</div>					))}				</div>			</main>			<Footer />		</div>	);};export default ServiceList;