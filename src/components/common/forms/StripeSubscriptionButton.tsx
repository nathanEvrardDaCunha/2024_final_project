import React from 'react';import { loadStripe } from '@stripe/stripe-js';const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);interface StripeSubscriptionButtonProps {	planType: 'BAGPACKER' | 'EXPLORATOR' | 'DELETE';	interval?: 'MONTHLY' | 'YEARLY';	onSubscriptionChange?: () => void;}const StripeSubscriptionButton: React.FC<StripeSubscriptionButtonProps> = ({ planType, interval, onSubscriptionChange }) => {	const handleClick = async () => {		try {			const token = localStorage.getItem('token');			if (!token) {				throw new Error('You must be logged in to manage subscriptions');			}						if (planType === 'DELETE') {				const response = await fetch(`${import.meta.env.VITE_API_URL}/stripe/create-checkout-session`, {					method: 'POST',					headers: {						'Content-Type': 'application/json',						'Authorization': `Bearer ${token}`,					},					body: JSON.stringify({ type: 'subscription', planType }),				});								if (!response.ok) {					const errorText = await response.text();					throw new Error(`Failed to cancel subscription: ${errorText}`);				}								const result = await response.json();				if (result.success) {					alert(result.message);					if (onSubscriptionChange) {						onSubscriptionChange();					}				}			} else {				const stripe = await stripePromise;								if (!stripe) {					throw new Error('Stripe failed to load');				}								const response = await fetch(`${import.meta.env.VITE_API_URL}/stripe/create-checkout-session`, {					method: 'POST',					headers: {						'Content-Type': 'application/json',						'Authorization': `Bearer ${token}`,					},					body: JSON.stringify({ type: 'subscription', planType, interval }),				});								if (!response.ok) {					const errorText = await response.text();					throw new Error(`Failed to create checkout session: ${errorText}`);				}								const session = await response.json();								const result = await stripe.redirectToCheckout({					sessionId: session.id,				});								if (result.error) {					throw new Error(result.error.message);				}			}		} catch (error) {			console.error('Error:', error);			alert('An error occurred. Please check the console for more details.');		}	};		let buttonText = '';	if (planType === 'DELETE') {		buttonText = 'Cancel Subscription';	} else {		buttonText = `Subscribe to ${planType} (${interval})`;	}		return (		<button onClick={handleClick} className="btn btn-primary">			{buttonText}		</button>	);};export default StripeSubscriptionButton;