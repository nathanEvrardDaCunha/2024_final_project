import React, { useState, useEffect } from 'react';import { useParams } from 'react-router-dom';import { getToken } from '../utils/jwt';import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';import Header from "./layout/header/Header";import Footer from "./layout/Footer";import BigCard from "./common/cards/BigCard";import CardBody from "./common/cards/CardBody";import CardTitleCentered from "./common/cards/CardTitleCentered";interface Service {	id: number;	name: string;	price: string;	reservationId: number;	avis?: {		id: number;		reactivity: number;		disponibility: number;		quality: number;	};}const serviceIcons: { [key: string]: string } = {	CHECK_IN_CHECK_OUT: '🔑',	LUGGAGE_STORAGE: '🧳',	AIRPORT_TRANSFER: '🚗',	LOCAL_TOUR_GUIDE: '🗺️',	MEAL_DELIVERY: '🍽️',	HOUSEKEEPING: '🧹',	LAUNDRY_SERVICE: '🧺',	BIKE_RENTAL: '🚲',	CHILDCARE: '👶',	PET_SITTING: '🐾',	PROPERTY_PHOTOGRAPHY: '📸',	LISTING_OPTIMIZATION: '📊',	PRICE_MANAGEMENT: '💰',	GUEST_SCREENING: '🔍',	MAINTENANCE_COORDINATION: '🔧',	DEEP_CLEANING: '🧼',	TAX_PREPARATION: '📑',	INSURANCE_MANAGEMENT: '🛡️',	LEGAL_CONSULTATION: '⚖️',	MARKETING_BOOST: '📣'};const formatServiceName = (name: string): string => {	return name.split('_').map(word => word.charAt(0) + word.slice(1).toLowerCase()).join(' ');};const formatServicePrice = (price: string): string => {	const numericPrice = price.replace('PRICE_', '');	return `${numericPrice}€`;};const styles = StyleSheet.create({	page: {		padding: 30,		fontFamily: 'Helvetica',	},	header: {		marginBottom: 20,	},	title: {		fontSize: 24,		marginBottom: 10,		textAlign: 'center',		color: '#333',	},	subtitle: {		fontSize: 14,		textAlign: 'center',		color: '#666',	},	divider: {		borderBottom: 1,		borderBottomColor: '#999',		marginVertical: 15,	},	section: {		marginBottom: 10,	},	sectionTitle: {		fontSize: 14,		fontWeight: 'bold',		marginBottom: 5,		color: '#555',	},	text: {		fontSize: 12,		marginBottom: 5,		color: '#666',	},	footer: {		position: 'absolute',		bottom: 30,		left: 0,		right: 0,		textAlign: 'center',	},	footerText: {		fontSize: 10,		color: '#888',	},});const ServicePDF = ({ service }) => {	const currentDate = new Date().toLocaleDateString();	const receiptNumber = `REC-${service.id}-${Math.random().toString(36).substr(2, 9)}`;		return (		<Document>			<Page size="A4" style={styles.page}>				<View style={styles.header}>					<Text style={styles.title}>ParisJanitor</Text>					<Text style={styles.subtitle}>Official Service Receipt</Text>				</View>				<View style={styles.divider} />								<View style={styles.section}>					<Text style={styles.sectionTitle}>Receipt Details</Text>					<Text style={styles.text}>Receipt Number: {receiptNumber}</Text>					<Text style={styles.text}>Date: {currentDate}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Service Information</Text>					<Text style={styles.text}>Service: {formatServiceName(service.name)}</Text>					<Text style={styles.text}>Price: {formatServicePrice(service.price)}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Reservation Details</Text>					<Text style={styles.text}>Reservation ID: {service.reservationId}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Payment Information</Text>					<Text style={styles.text}>Payment Method: Credit Card</Text>					<Text style={styles.text}>Payment Status: Paid</Text>				</View>								<View style={styles.footer}>					<View style={styles.divider} />					<Text style={styles.footerText}>Thank you for choosing ParisJanitor</Text>					<Text style={styles.footerText}>For any queries, please contact support@parisjanitor.com</Text>				</View>			</Page>		</Document>	);};const ReservationServices: React.FC = () => {	const [services, setServices] = useState<Service[]>([]);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const { reservationId } = useParams<{ reservationId: string }>();	const [avisForm, setAvisForm] = useState<{ [key: number]: { reactivity: number; disponibility: number; quality: number } }>({});	const [refreshTrigger, setRefreshTrigger] = useState(0);		useEffect(() => {		const fetchServices = async () => {			try {				const response = await fetch(`http://localhost:3000/location/reservations/${reservationId}/services`, {					headers: {						'Authorization': `Bearer ${getToken()}`					}				});				if (!response.ok) {					throw new Error('Failed to fetch services');				}				const data = await response.json();				setServices(data);				setIsLoading(false);			} catch (err) {				setError(err instanceof Error ? err.message : 'An unknown error occurred');				setIsLoading(false);			}		};				fetchServices();	}, [reservationId, refreshTrigger]);		const handleDeleteService = async (serviceId: number) => {		try {			const response = await fetch(`http://localhost:3000/location/services/${serviceId}`, {				method: 'DELETE',				headers: {					'Authorization': `Bearer ${getToken()}`				}			});			if (!response.ok) {				throw new Error('Failed to delete service');			}			setServices(services.filter(service => service.id !== serviceId));		} catch (err) {			setError(err instanceof Error ? err.message : 'An unknown error occurred');		}	};		const handleCreateAvis = async (serviceId: number) => {		try {			const response = await fetch(`http://localhost:3000/avis`, {				method: 'POST',				headers: {					'Authorization': `Bearer ${getToken()}`,					'Content-Type': 'application/json',				},				body: JSON.stringify({					serviceId,					...avisForm[serviceId],				}),			});			if (!response.ok) {				throw new Error('Failed to create Avis');			}			setRefreshTrigger(prev => prev + 1);			setAvisForm(prev => ({ ...prev, [serviceId]: undefined }));		} catch (err) {			setError(err instanceof Error ? err.message : 'An unknown error occurred');		}	};		const handleDeleteAvis = async (serviceId: number) => {		try {			const response = await fetch(`http://localhost:3000/avis/${serviceId}`, {				method: 'DELETE',				headers: {					'Authorization': `Bearer ${getToken()}`,				},			});			if (!response.ok) {				throw new Error('Failed to delete Avis');			}			setRefreshTrigger(prev => prev + 1);		} catch (err) {			setError(err instanceof Error ? err.message : 'An unknown error occurred');		}	};		const handleAvisChange = (serviceId: number, field: string, value: number) => {		setAvisForm(prev => ({			...prev,			[serviceId]: {				...prev[serviceId],				[field]: value,			},		}));	};		if (isLoading) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<span className="loading loading-spinner loading-lg text-primary"></span>		</div>	);		if (error) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<div className="alert alert-error shadow-lg max-w-md">				<div>					<svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>					<span>{error}</span>				</div>			</div>		</div>	);		return (		<div className="flex flex-col min-h-screen bg-gray-100">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-4xl font-bold text-center mb-12 text-gray-800">Reservation Services</h1>				{services.length === 0 ? (					<p className="text-center text-xl text-gray-600">No services found for this reservation.</p>				) : (					<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">						{services.map((service) => (							<BigCard key={service.id} className="shadow-xl">								<CardBody>									<div className="flex items-center mb-4">										<span className="text-4xl mr-4">{serviceIcons[service.name] || '🔧'}</span>										<CardTitleCentered text={formatServiceName(service.name)} className="text-xl" />									</div>									<div className="text-center">										<p className="text-lg font-semibold mb-4">Price: {formatServicePrice(service.price)}</p>										<button											onClick={() => handleDeleteService(service.id)}											className="btn btn-error mb-2"										>											Delete Service										</button>										<PDFDownloadLink											document={<ServicePDF service={service} />}											fileName={`service_${service.id}.pdf`}											className="btn btn-primary"										>											{({ blob, url, loading, error }) =>												loading ? 'Loading document...' : 'Print PDF'											}										</PDFDownloadLink>									</div>									{service.avis ? (										<div className="mt-4">											<h3 className="font-bold">Your Review:</h3>											<p>Reactivity: {service.avis.reactivity}</p>											<p>Availability: {service.avis.disponibility}</p>											<p>Quality: {service.avis.quality}</p>											<button												onClick={() => handleDeleteAvis(service.id)}												className="btn btn-warning mt-2"											>												Delete Review											</button>										</div>									) : (										<div className="mt-4">											<h3 className="font-bold">Leave a Review:</h3>											{['reactivity', 'disponibility', 'quality'].map((field) => (												<div key={field} className="mt-2">													<label className="label">{field.charAt(0).toUpperCase() + field.slice(1)}:</label>													<input														type="number"														min="1"														max="5"														className="input input-bordered w-full"														value={avisForm[service.id]?.[field] || ''}														onChange={(e) => handleAvisChange(service.id, field, parseInt(e.target.value))}													/>												</div>											))}											<button												onClick={() => handleCreateAvis(service.id)}												className="btn btn-primary mt-2"												disabled={!avisForm[service.id] || Object.values(avisForm[service.id]).some(v => !v)}											>												Submit Review											</button>										</div>									)}								</CardBody>							</BigCard>						))}					</div>				)}			</main>			<Footer />		</div>	);};export default ReservationServices;