import React, { useState } from 'react';import { getToken } from '../utils/jwt';import BigCard from '../components/common/cards/BigCard';import CardBody from '../components/common/cards/CardBody';import CardTitleCentered from '../components/common/cards/CardTitleCentered';interface User {	id: number;	firstname: string;	lastname: string;	email: string;	status: string;	birthDate: string;	phoneNumber: string;}interface UserDetailManagementProps {	user: User;	onClose: () => void;	onUserUpdated: (updatedUser: User) => void;}const UserDetailManagement: React.FC<UserDetailManagementProps> = ({ user, onClose, onUserUpdated }) => {	const [editedUser, setEditedUser] = useState<User>({ ...user });	const [changedFields, setChangedFields] = useState<Partial<User>>({});		const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {		const { name, value } = e.target;		setEditedUser(prev => ({ ...prev, [name]: value }));		setChangedFields(prev => ({ ...prev, [name]: value }));	};		const handleSubmit = async (e: React.FormEvent) => {		e.preventDefault();		try {			const response = await fetch(`http://localhost:3000/dashboard/users/${user.id}`, {				method: 'PUT',				headers: {					'Authorization': `Bearer ${getToken()}`,					'Content-Type': 'application/json',				},				body: JSON.stringify(changedFields),			});						if (!response.ok) {				const errorData = await response.json();				throw new Error(errorData.error || 'Failed to update user');			}						const updatedUser = await response.json();			onUserUpdated(updatedUser);		} catch (error) {			console.error('Error updating user:', error);			alert(error instanceof Error ? error.message : 'An error occurred while updating the user');		}	};		return (		<BigCard>			<CardBody>				<CardTitleCentered text={`Edit User: ${user.firstname} ${user.lastname}`} />				<form onSubmit={handleSubmit}>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="firstname">							First Name						</label>						<input							type="text"							id="firstname"							name="firstname"							value={editedUser.firstname}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="lastname">							Last Name						</label>						<input							type="text"							id="lastname"							name="lastname"							value={editedUser.lastname}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="email">							Email						</label>						<input							type="email"							id="email"							name="email"							value={editedUser.email}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="birthDate">							Birth Date						</label>						<input							type="date"							id="birthDate"							name="birthDate"							value={editedUser.birthDate}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="phoneNumber">							Phone Number						</label>						<input							type="tel"							id="phoneNumber"							name="phoneNumber"							value={editedUser.phoneNumber}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="mb-4">						<label className="block text-sm font-bold mb-2" htmlFor="status">							Status						</label>						<input							type="text"							id="status"							name="status"							value={editedUser.status}							onChange={handleInputChange}							className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"						/>					</div>					<div className="flex justify-between">						<button							type="button"							onClick={onClose}							className="btn btn-secondary"						>							Cancel						</button>						<button							type="submit"							className="btn btn-primary"							disabled={Object.keys(changedFields).length === 0}						>							Save Changes						</button>					</div>				</form>			</CardBody>		</BigCard>	);};export default UserDetailManagement;