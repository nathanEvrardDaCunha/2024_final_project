import React, { useState } from 'react';import * as Yup from 'yup';import FormControl from '../components/common/forms/FormControl.tsx';import Label from '../components/common/forms/Label.tsx';import Input from '../components/common/forms/Input.tsx';import SubmitButton from "../components/common/forms/SubmitButton.tsx";import CardTitleCentered from "../components/common/cards/CardTitleCentered.tsx";import CardBody from "../components/common/cards/CardBody.tsx";import ContentBackground from "../components/layout/ContentBackground.tsx";import BigCard from "../components/common/cards/BigCard.tsx";import WarningMessage from '../components/common/WarningMessage.tsx';interface FormData {	email: string;	firstname: string;	lastname: string;	birthDate: string;	password: string;	phoneNumber: string;}interface FormErrors {	email?: string;	firstname?: string;	lastname?: string;	birthDate?: string;	password?: string;	phoneNumber?: string;}function calculateAge(birthDate: Date): number {	const today = new Date();	let age = today.getFullYear() - birthDate.getFullYear();	const monthDifference = today.getMonth() - birthDate.getMonth();		if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthDate.getDate())) {		age--;	}		return age;}const Register = () => {	const [formData, setFormData] = useState<FormData>({		email: '',		firstname: '',		lastname: '',		birthDate: '',		password: '',		phoneNumber: ''	});		const [errors, setErrors] = useState<FormErrors>({});	const [isSubmitting, setIsSubmitting] = useState(false);	const [attemptedSubmit, setAttemptedSubmit] = useState(false);		const validationSchema = Yup.object().shape({		email: Yup.string()			.email('Invalid email address')			.required('Email is required'),		firstname: Yup.string()			.matches(/^[a-zA-Z]+$/, 'First name should only contain letters')			.required('First name is required'),		lastname: Yup.string()			.matches(/^[a-zA-Z]+$/, 'Last name should only contain letters')			.required('Last name is required'),		birthDate: Yup.date()			.transform((value, originalValue) => {				return originalValue ? new Date(originalValue) : null;			})			.typeError('Please enter a valid date')			.max(new Date(), 'Birth date cannot be in the future')			.test('age', 'You must be at least 18 years old to register', function(value) {				return value ? calculateAge(value) >= 18 : false;			})			.nullable()			.required('Birth date is required'),		password: Yup.string()			.min(8, 'Password must be at least 8 characters')			.matches(/[a-zA-Z]/, 'Password must contain at least one letter')			.matches(/[0-9]/, 'Password must contain at least one number')			.matches(/[!@#$%^&*(),.?":{}|<>]/, 'Password must contain at least one special character')			.required('Password is required'),		phoneNumber: Yup.string()			.matches(/^\+\d{2}[0-9]{9}$/, 'Phone number must be in the format: +XXXXXXXXXXXX')			.required('Phone number is required'),	});		const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {		const { name, value } = e.target;		setFormData(prevState => ({			...prevState,			[name]: value		}));				if (errors[name as keyof FormErrors]) {			setErrors(prevErrors => ({				...prevErrors,				[name]: undefined			}));		}	};		const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setIsSubmitting(true);		setAttemptedSubmit(true);				try {			await validationSchema.validate(formData, { abortEarly: false });			const response = await fetch('http://localhost:3000/auth/register', {				method: 'POST',				headers: {					'Content-Type': 'application/json',				},				body: JSON.stringify(formData),			});						if (!response.ok) {				throw new Error('Registration failed');			}						const data = await response.json();			console.log('Registration successful:', data);			setErrors({});		} catch (error) {			if (error instanceof Yup.ValidationError) {				const newErrors: FormErrors = {};				error.inner.forEach(err => {					if (err.path) {						newErrors[err.path as keyof FormErrors] = err.message;					}				});				setErrors(newErrors);			} else {				console.error('Registration error:', error);			}		} finally {			setIsSubmitting(false);		}	};		return (		<ContentBackground>			<BigCard>				<CardBody>					<CardTitleCentered text="Register" />					<form onSubmit={handleSubmit}>						<FormControl>							<Label htmlFor="email" text="Email" />							<Input								type="email"								name="email"								value={formData.email}								onChange={handleChange}								placeholder="johndoe@gmail.com"							/>							{attemptedSubmit && errors.email && <WarningMessage message={errors.email} />}						</FormControl>						<FormControl>							<Label htmlFor="firstname" text="First Name" />							<Input								type="text"								name="firstname"								value={formData.firstname}								onChange={handleChange}								placeholder="John"							/>							{attemptedSubmit && errors.firstname && <WarningMessage message={errors.firstname} />}						</FormControl>						<FormControl>							<Label htmlFor="lastname" text="Last Name" />							<Input								type="text"								name="lastname"								value={formData.lastname}								onChange={handleChange}								placeholder="Doe"							/>							{attemptedSubmit && errors.lastname && <WarningMessage message={errors.lastname} />}						</FormControl>						<FormControl>							<Label htmlFor="birthDate" text="Birth Date" />							<Input								type="date"								name="birthDate"								value={formData.birthDate}								onChange={handleChange}							/>							{attemptedSubmit && errors.birthDate && <WarningMessage message={errors.birthDate} />}						</FormControl>						<FormControl>							<Label htmlFor="password" text="Password" />							<Input								type="password"								name="password"								value={formData.password}								onChange={handleChange}								placeholder="HelloWorld123!"							/>							{attemptedSubmit && errors.password && <WarningMessage message={errors.password} />}						</FormControl>						<FormControl>							<Label htmlFor="phoneNumber" text="Phone Number" />							<Input								type="tel"								name="phoneNumber"								value={formData.phoneNumber}								onChange={handleChange}								placeholder="+33601020304"							/>							{attemptedSubmit && errors.phoneNumber && <WarningMessage message={errors.phoneNumber} />}						</FormControl>						<SubmitButton text="Register" disabled={isSubmitting} />					</form>				</CardBody>			</BigCard>		</ContentBackground>	);};export default Register;