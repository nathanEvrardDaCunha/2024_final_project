import React, { useState, useEffect } from 'react';import { useParams } from 'react-router-dom';import Header from '../components/layout/header/Header';import Footer from '../components/layout/Footer';import { getAssociatedServices } from '../hooks/adminLocationService';interface Service {	id: number;	name: string;	price: number | string;	reservationId: number;	reservationStartDate: string;	reservationNights: number;}const AssociatedServices: React.FC = () => {	const { id } = useParams<{ id: string }>();	const [services, setServices] = useState<Service[]>([]);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);		useEffect(() => {		const fetchServices = async () => {			if (id) {				try {					setIsLoading(true);					const fetchedServices = await getAssociatedServices(parseInt(id));					setServices(fetchedServices);				} catch (error) {					console.error('Error fetching associated services:', error);					setError('Failed to load associated services. Please try again later.');				} finally {					setIsLoading(false);				}			}		};				fetchServices();	}, [id]);		const formatPrice = (price: any): string => {		const numPrice = Number(price);		return isNaN(numPrice) ? 'N/A' : numPrice.toFixed(2);	};		if (isLoading) {		return (			<div className="min-h-screen flex justify-center items-center">				<span className="loading loading-spinner loading-lg"></span>			</div>		);	}		if (error) {		return (			<div className="min-h-screen flex justify-center items-center">				<p className="text-red-500">{error}</p>			</div>		);	}		return (		<div className="flex flex-col min-h-screen bg-base-200">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-3xl font-bold mb-6">Associated Services for Location {id}</h1>				<div className="overflow-x-auto">					<table className="table w-full">						<thead>						<tr>							<th>ID</th>							<th>Name</th>							<th>Reservation ID</th>							<th>Reservation Start Date</th>						</tr>						</thead>						<tbody>						{services.map((service) => (							<tr key={service.id}>								<td>{service.id}</td>								<td>{service.name}</td>								<td>{service.reservationId}</td>								<td>{new Date(service.reservationStartDate).toLocaleDateString()}</td>							</tr>						))}						</tbody>					</table>				</div>				{services.length === 0 && (					<p className="text-center mt-4">No associated services found for this location.</p>				)}			</main>			<Footer />		</div>	);};export default AssociatedServices;