import React, { useState, useEffect } from 'react';import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';import Header from "../components/layout/header/Header";import ContentBackground from "../components/layout/ContentBackground";import Footer from "../components/layout/Footer";import StripeSubscriptionButton from "../components/common/forms/StripeSubscriptionButton";import {getUserStatus} from "../utils/jwt.tsx";interface UserInfo {	status: 'ADMIN' | 'RENTER' | 'FREE' | 'BAGPACKER_MONTHLY' | 'BAGPACKER_YEARLY' | 'EXPLORATOR_MONTHLY' | 'EXPLORATOR_YEARLY' | 'BANNED_RENTER' | 'BANNED_FREE' | 'BANNED_BAGPACKER_MONTHLY' | 'BANNED_BAGPACKER_YEARLY' | 'BANNED_EXPLORATOR_MONTHLY' | 'BANNED_EXPLORATOR_YEARLY';}const styles = StyleSheet.create({	page: { padding: 30, fontFamily: 'Helvetica' },	header: { marginBottom: 20 },	title: { fontSize: 24, textAlign: 'center', marginBottom: 10, color: '#333' },	subtitle: { fontSize: 14, textAlign: 'center', color: '#666' },	divider: { borderBottom: 1, borderBottomColor: '#999', marginVertical: 15 },	section: { marginBottom: 10 },	sectionTitle: { fontSize: 14, fontWeight: 'bold', marginBottom: 5, color: '#555' },	text: { fontSize: 12, marginBottom: 5, color: '#666' },	footer: { position: 'absolute', bottom: 30, left: 30, right: 30, textAlign: 'center' },	footerText: { fontSize: 10, color: '#888' },});const getSubscriptionCost = (status: UserInfo['status']): string => {	switch (status) {		case 'BAGPACKER_MONTHLY': return '9.90';		case 'BAGPACKER_YEARLY': return '113.00';		case 'EXPLORATOR_MONTHLY': return '19.00';		case 'EXPLORATOR_YEARLY': return '220.00';		default: return '0.00';	}};const SubscriptionPDF = ({ userInfo }: { userInfo: UserInfo }) => {	const currentDate = new Date().toLocaleDateString();	const subscriptionCost = getSubscriptionCost(userInfo.status);		return (		<Document>			<Page size="A4" style={styles.page}>				<View style={styles.header}>					<Text style={styles.title}>ParisJanitor</Text>					<Text style={styles.subtitle}>Subscription Details</Text>				</View>				<View style={styles.divider} />								<View style={styles.section}>					<Text style={styles.sectionTitle}>Subscription Information</Text>					<Text style={styles.text}>Date: {currentDate}</Text>					<Text style={styles.text}>Status: {userInfo.status}</Text>					<Text style={styles.text}>Subscription Cost: â‚¬{subscriptionCost}</Text>				</View>								<View style={styles.footer}>					<View style={styles.divider} />					<Text style={styles.footerText}>Thank you for subscribing to ParisJanitor</Text>					<Text style={styles.footerText}>For any queries, please contact support@parisjanitor.com</Text>				</View>			</Page>		</Document>	);};const ManageSubscription: React.FC = () => {	const [userInfo, setUserInfo] = useState<UserInfo | null>(null);		const fetchUserInfo = async () => {		try {			const token = localStorage.getItem('token');			if (!token) {				throw new Error('No authentication token found');			}						const response = await fetch(`${import.meta.env.VITE_API_URL}/dashboard/user`, {				headers: {					'Authorization': `Bearer ${token}`,				},			});						if (!response.ok) {				throw new Error('Failed to fetch user info');			}						const info = await response.json();			setUserInfo(info);		} catch (error) {			console.error('Error fetching user info:', error);		}	};		useEffect(() => {		fetchUserInfo();	}, []);		if (!userInfo) return <div>Loading...</div>;		const userStatus = getUserStatus();		return (		<>			<Header />			<ContentBackground>				<div className="container mx-auto px-4 py-8">					<div className="card bg-base-100 shadow-xl max-w-4xl mx-auto">						<div className="card-body">							<h2 className="card-title justify-center mb-4 text-2xl font-bold">Manage Subscription</h2>							<div className="text-center mb-6">								<p className="text-lg">Current Status: <span className="font-semibold">{userInfo.status}</span></p>							</div>							{userInfo.status === 'FREE' && (								<div className="space-y-8">									<div>										<h3 className="text-xl font-semibold mb-4 text-center">BAGPACKER Plan</h3>										<div className="flex flex-wrap justify-center gap-4">											<StripeSubscriptionButton planType="BAGPACKER" interval="MONTHLY" onSubscriptionChange={fetchUserInfo} />											<StripeSubscriptionButton planType="BAGPACKER" interval="YEARLY" onSubscriptionChange={fetchUserInfo} />										</div>									</div>									<div>										<h3 className="text-xl font-semibold mb-4 text-center">EXPLORATOR Plan</h3>										<div className="flex flex-wrap justify-center gap-4">											<StripeSubscriptionButton planType="EXPLORATOR" interval="MONTHLY" onSubscriptionChange={fetchUserInfo} />											<StripeSubscriptionButton planType="EXPLORATOR" interval="YEARLY" onSubscriptionChange={fetchUserInfo} />										</div>									</div>								</div>							)}							{(['BAGPACKER_MONTHLY', 'BAGPACKER_YEARLY', 'EXPLORATOR_MONTHLY', 'EXPLORATOR_YEARLY'].includes(userInfo.status)) && (								<div className="text-center">									<h3 className="text-xl font-semibold mb-4">Cancel Subscription</h3>									<StripeSubscriptionButton planType="DELETE" onSubscriptionChange={fetchUserInfo} />								</div>							)}							<div className="mt-8 text-center">								<PDFDownloadLink									document={<SubscriptionPDF userInfo={userInfo} />}									fileName="subscription_details.pdf"									className="btn btn-primary"								>									{({ blob, url, loading, error }) =>										loading ? 'Generating PDF...' : 'Print Subscription Details'									}								</PDFDownloadLink>							</div>						</div>					</div>				</div>			</ContentBackground>			<Footer />		</>	);};export default ManageSubscription;