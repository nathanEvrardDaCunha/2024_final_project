import React, { useState, useEffect } from 'react';import Header from "../components/layout/header/Header";import ContentBackground from "../components/layout/ContentBackground";import Footer from "../components/layout/Footer";import StripeSubscriptionButton from "../components/common/forms/StripeSubscriptionButton";interface UserInfo {	status: 'ADMIN' | 'RENTER' | 'FREE' | 'BAGPACKER_MONTHLY' | 'BAGPACKER_YEARLY' | 'EXPLORATOR_MONTHLY' | 'EXPLORATOR_YEARLY' | 'BANNED_RENTER' | 'BANNED_FREE' | 'BANNED_BAGPACKER_MONTHLY' | 'BANNED_BAGPACKER_YEARLY' | 'BANNED_EXPLORATOR_MONTHLY' | 'BANNED_EXPLORATOR_YEARLY';	// Add other user properties as needed}const ManageSubscription: React.FC = () => {	const [userInfo, setUserInfo] = useState<UserInfo | null>(null);		const fetchUserInfo = async () => {		try {			const token = localStorage.getItem('token');			if (!token) {				throw new Error('No authentication token found');			}						const response = await fetch('http://localhost:3000/dashboard/user', {				headers: {					'Authorization': `Bearer ${token}`,				},			});						if (!response.ok) {				throw new Error('Failed to fetch user info');			}						const info = await response.json();			setUserInfo(info);		} catch (error) {			console.error('Error fetching user info:', error);			// Handle error (e.g., show error message to user)		}	};		useEffect(() => {		fetchUserInfo();	}, []);		if (!userInfo) return <div>Loading...</div>;		return (		<>			<Header />			<ContentBackground>				<div className="container mx-auto px-4 py-8">					<div className="card bg-base-100 shadow-xl max-w-4xl mx-auto">						<div className="card-body">							<h2 className="card-title justify-center mb-4 text-2xl font-bold">Manage Subscription</h2>							<div className="text-center mb-6">								<p className="text-lg">Current Status: <span className="font-semibold">{userInfo.status}</span></p>							</div>							{userInfo.status === 'FREE' && (								<div className="space-y-8">									<div>										<h3 className="text-xl font-semibold mb-4 text-center">BAGPACKER Plan</h3>										<div className="flex flex-wrap justify-center gap-4">											<StripeSubscriptionButton planType="BAGPACKER" interval="MONTHLY" onSubscriptionChange={fetchUserInfo} />											<StripeSubscriptionButton planType="BAGPACKER" interval="YEARLY" onSubscriptionChange={fetchUserInfo} />										</div>									</div>									<div>										<h3 className="text-xl font-semibold mb-4 text-center">EXPLORATOR Plan</h3>										<div className="flex flex-wrap justify-center gap-4">											<StripeSubscriptionButton planType="EXPLORATOR" interval="MONTHLY" onSubscriptionChange={fetchUserInfo} />											<StripeSubscriptionButton planType="EXPLORATOR" interval="YEARLY" onSubscriptionChange={fetchUserInfo} />										</div>									</div>								</div>							)}							{(['BAGPACKER_MONTHLY', 'BAGPACKER_YEARLY', 'EXPLORATOR_MONTHLY', 'EXPLORATOR_YEARLY'].includes(userInfo.status)) && (								<div className="text-center">									<h3 className="text-xl font-semibold mb-4">Cancel Subscription</h3>									<StripeSubscriptionButton planType="DELETE" onSubscriptionChange={fetchUserInfo} />								</div>							)}						</div>					</div>				</div>			</ContentBackground>			<Footer />		</>	);};export default ManageSubscription;