import React, { useState, useEffect } from 'react';import { Link, useNavigate } from 'react-router-dom';import Header from "../components/layout/header/Header";import ContentBackground from "../components/layout/ContentBackground";import BigCard from "../components/common/cards/BigCard";import CardBody from "../components/common/cards/CardBody";import CardTitleCentered from "../components/common/cards/CardTitleCentered";import CardParagraph from "../components/common/cards/CardParagraph";import Footer from "../components/layout/Footer";import EditUserForm from "../forms/EditUserForm";import { getUserInfo, deleteUserAccount } from '../utils/api';interface UserInfo {	id: number;	email: string;	firstname: string;	lastname: string;	phoneNumber: string;	birthDate: string;	status: 'ADMIN' | 'RENTER' | 'FREE' | 'BAGPACKER_MONTHLY' | 'BAGPACKER_YEARLY' | 'EXPLORATOR_MONTHLY' | 'EXPLORATOR_YEARLY' | 'BANNED_RENTER' | 'BANNED_FREE' | 'BANNED_BAGPACKER_MONTHLY' | 'BANNED_BAGPACKER_YEARLY' | 'BANNED_EXPLORATOR_MONTHLY' | 'BANNED_EXPLORATOR_YEARLY';}const Dashboard: React.FC = () => {	const [userInfo, setUserInfo] = useState<UserInfo | null>(null);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const [isEditing, setIsEditing] = useState(false);	const navigate = useNavigate();		useEffect(() => {		const fetchUserInfo = async () => {			try {				const info = await getUserInfo();				setUserInfo(info);				setIsLoading(false);			} catch (error) {				console.error('Error fetching user info:', error);				setError('Failed to load user information. Please try again later.');				setIsLoading(false);				navigate('/login');			}		};				fetchUserInfo();	}, [navigate]);		const handleDeleteAccount = async () => {		if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {			try {				await deleteUserAccount();				localStorage.removeItem('token'); // Clear the authentication token				navigate('/login');			} catch (error) {				console.error('Error deleting account:', error);				setError('Failed to delete your account. Please try again later.');			}		}	};		if (isLoading) {		return <div>Loading...</div>;	}		if (error) {		return <div>Error: {error}</div>;	}		if (!userInfo) {		return <div>No user information available.</div>;	}		const canManageSubscription = ['FREE', 'BAGPACKER_MONTHLY', 'BAGPACKER_YEARLY', 'EXPLORATOR_MONTHLY', 'EXPLORATOR_YEARLY'].includes(userInfo.status);	const showAds = userInfo.status === 'FREE';		return (		<>			<Header />			<ContentBackground>				<BigCard>					<CardBody>						<CardTitleCentered text="User Dashboard" />						{isEditing ? (							<EditUserForm								userInfo={userInfo}								onCancel={() => setIsEditing(false)}								onUpdate={(updatedInfo) => {									setUserInfo(updatedInfo);									setIsEditing(false);								}}							/>						) : (							<div>								<CardParagraph label="Name" value={`${userInfo.firstname} ${userInfo.lastname}`} />								<CardParagraph label="Email" value={userInfo.email} />								<CardParagraph label="Phone" value={userInfo.phoneNumber} />								<CardParagraph label="Birth Date" value={new Date(userInfo.birthDate).toLocaleDateString()} />								<CardParagraph label="Status" value={userInfo.status} />								<button									onClick={() => setIsEditing(true)}									className="btn btn-primary mt-4"								>									Edit Profile								</button>								{canManageSubscription && (									<Link										to="/manage-subscription"										className="btn btn-secondary mt-4 ml-4"									>										Manage Subscription									</Link>								)}								<button									onClick={handleDeleteAccount}									className="btn btn-danger mt-4 ml-4"								>									Delete Account								</button>							</div>						)}					</CardBody>				</BigCard>			</ContentBackground>			<Footer />		</>	);};export default Dashboard;