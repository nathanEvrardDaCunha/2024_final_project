import React, { useEffect, useState } from 'react';import { useNavigate } from 'react-router-dom';import Header from "../components/layout/header/Header";import ContentBackground from "../components/layout/ContentBackground";import BigCard from "../components/common/cards/BigCard";import CardBody from "../components/common/cards/CardBody";import CardTitleCentered from "../components/common/cards/CardTitleCentered";import CardParagraph from "../components/common/cards/CardParagraph";import Footer from "../components/layout/Footer";import { getToken } from '../utils/jwt';import EditUserForm from "../forms/EditUserForm.tsx";interface UserInfo {	id: number;	email: string;	firstname: string;	lastname: string;	phoneNumber: string;	birthDate: string;	status: 'MEMBER' | 'SUSPENDED' | 'BANNED' | 'ADMIN';}const Dashboard = () => {	const [userInfo, setUserInfo] = useState<UserInfo | null>(null);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const [isEditing, setIsEditing] = useState(false);	const navigate = useNavigate();		useEffect(() => {		const fetchUserInfo = async () => {			const token = getToken();			if (!token) {				navigate('/login');				return;			}						try {				const response = await fetch('http://localhost:3000/dashboard/user', {					headers: {						'Authorization': `Bearer ${token}`					}				});								if (!response.ok) {					throw new Error('Failed to fetch user info');				}								const data = await response.json();				setUserInfo(data);			} catch (error) {				console.error('Error fetching user info:', error);				setError('Failed to load user information. Please try again later.');			} finally {				setIsLoading(false);			}		};				fetchUserInfo();	}, [navigate]);		if (isLoading) {		return <div>Loading...</div>;	}		if (error) {		return <div>Error: {error}</div>;	}		if (!userInfo) {		return <div>No user information available.</div>;	}		return (		<>			<Header />			<ContentBackground>				<BigCard>					<CardBody>						<CardTitleCentered text="User Dashboard" />						{isEditing ? (							<EditUserForm userInfo={userInfo} onCancel={() => setIsEditing(false)} onUpdate={(updatedInfo) => {								setUserInfo(updatedInfo);								setIsEditing(false);							}} />						) : (							<div>								<CardParagraph label="Name" value={`${userInfo.firstname} ${userInfo.lastname}`} />								<CardParagraph label="Email" value={userInfo.email} />								<CardParagraph label="Phone" value={userInfo.phoneNumber} />								<CardParagraph label="Birth Date" value={new Date(userInfo.birthDate).toLocaleDateString()} />								<CardParagraph label="Status" value={userInfo.status} />								<button onClick={() => setIsEditing(true)} className="btn btn-primary mt-4">Edit Profile</button>							</div>						)}					</CardBody>				</BigCard>			</ContentBackground>			<Footer />		</>	);};export default Dashboard;