import React, { useState, useEffect } from 'react';import { Link } from 'react-router-dom';import { Document, Page, Text, View, StyleSheet, PDFDownloadLink } from '@react-pdf/renderer';import Header from "../components/layout/header/Header";import Footer from "../components/layout/Footer";import BigCard from "../components/common/cards/BigCard";import CardBody from "../components/common/cards/CardBody";import CardTitleCentered from "../components/common/cards/CardTitleCentered";import { getUserReservations } from "../hooks/adminLocationService";import { getUserStatus } from "../utils/jwt";interface ReservationWithLocation {	id: number;	startDate: string;	endDate: string;	numberOfNights: number;	numberOfPeople: number;	location: {		title: string;		pricePerNight: number;	};}const styles = StyleSheet.create({	page: { padding: 30, fontFamily: 'Helvetica' },	header: { marginBottom: 20 },	title: { fontSize: 24, textAlign: 'center', marginBottom: 10, color: '#333' },	subtitle: { fontSize: 14, textAlign: 'center', color: '#666' },	divider: { borderBottom: 1, borderBottomColor: '#999', marginVertical: 15 },	section: { marginBottom: 10 },	sectionTitle: { fontSize: 14, fontWeight: 'bold', marginBottom: 5, color: '#555' },	text: { fontSize: 12, marginBottom: 5, color: '#666' },	footer: { position: 'absolute', bottom: 30, left: 30, right: 30, textAlign: 'center' },	footerText: { fontSize: 10, color: '#888' },});const ReservationPDF = ({ reservation }: { reservation: ReservationWithLocation }) => {	const totalPrice = reservation.location.pricePerNight * reservation.numberOfNights;	const finalPrice = totalPrice * 1.2;	const currentDate = new Date().toLocaleDateString();	const receiptNumber = `RES-${reservation.id}-${Math.random().toString(36).substr(2, 9)}`;		return (		<Document>			<Page size="A4" style={styles.page}>				<View style={styles.header}>					<Text style={styles.title}>ParisJanitor</Text>					<Text style={styles.subtitle}>Official Reservation Receipt</Text>				</View>				<View style={styles.divider} />								<View style={styles.section}>					<Text style={styles.sectionTitle}>Receipt Details</Text>					<Text style={styles.text}>Receipt Number: {receiptNumber}</Text>					<Text style={styles.text}>Date: {currentDate}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Reservation Information</Text>					<Text style={styles.text}>Location: {reservation.location.title}</Text>					<Text style={styles.text}>Check-in: {new Date(reservation.startDate).toLocaleDateString()}</Text>					<Text style={styles.text}>Check-out: {new Date(reservation.endDate).toLocaleDateString()}</Text>					<Text style={styles.text}>Nights: {reservation.numberOfNights}</Text>					<Text style={styles.text}>Guests: {reservation.numberOfPeople}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Price Details</Text>					<Text style={styles.text}>Price per night: ${reservation.location.pricePerNight.toFixed(2)}</Text>					<Text style={styles.text}>Total price: ${totalPrice.toFixed(2)}</Text>					<Text style={styles.text}>Final price (including fees): ${finalPrice.toFixed(2)}</Text>				</View>								<View style={styles.section}>					<Text style={styles.sectionTitle}>Payment Information</Text>					<Text style={styles.text}>Payment Method: Credit Card</Text>					<Text style={styles.text}>Payment Status: Paid</Text>				</View>								<View style={styles.footer}>					<View style={styles.divider} />					<Text style={styles.footerText}>Thank you for choosing ParisJanitor</Text>					<Text style={styles.footerText}>For any queries, please contact support@parisjanitor.com</Text>				</View>			</Page>		</Document>	);};const UserReservations: React.FC = () => {	const [reservations, setReservations] = useState<ReservationWithLocation[]>([]);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);	const userStatus = getUserStatus();		useEffect(() => {		const fetchReservations = async () => {			try {				const data = await getUserReservations();				console.log('Fetched reservations:', data);				setReservations(data);				setIsLoading(false);			} catch (err) {				console.error('Error fetching reservations:', err);				setError(err instanceof Error ? err.message : 'An unknown error occurred');				setIsLoading(false);			}		};				fetchReservations();	}, []);		if (isLoading) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<span className="loading loading-spinner loading-lg text-primary"></span>		</div>	);		if (error) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<div className="alert alert-error shadow-lg max-w-md">				<div>					<svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>					<span>{error}</span>				</div>			</div>		</div>	);		const shouldShowPriceInfo = (userStatus: string | null) => {		return userStatus !== 'ADMIN' && userStatus !== 'RENTER';	};		return (		<div className="flex flex-col min-h-screen bg-gray-100">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-4xl font-bold text-center mb-12 text-gray-800">My Reservations</h1>				{reservations.length === 0 ? (					<p className="text-center text-xl text-gray-600">You don't have any reservations yet.</p>				) : (					<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">						{reservations.map((reservation) => (							<BigCard key={reservation.id} className="shadow-xl">								<CardBody>									<CardTitleCentered text={reservation.location.title || `Reservation #${reservation.id}`} className="text-xl mb-4" />									<div className="space-y-3">										<div className="flex justify-between">											<span className="font-semibold">Check-in:</span>											<span>{new Date(reservation.startDate).toLocaleDateString()}</span>										</div>										<div className="flex justify-between">											<span className="font-semibold">Check-out:</span>											<span>{new Date(reservation.endDate).toLocaleDateString()}</span>										</div>										<div className="flex justify-between">											<span className="font-semibold">Nights:</span>											<span>{reservation.numberOfNights}</span>										</div>										<div className="flex justify-between">											<span className="font-semibold">Guests:</span>											<span>{reservation.numberOfPeople}</span>										</div>										{shouldShowPriceInfo(userStatus) && (											<>												<div className="flex justify-between">													<span className="font-semibold">Price per night:</span>													<span>${reservation.location.pricePerNight.toFixed(2)}</span>												</div>												<div className="flex justify-between">													<span className="font-semibold">Total price:</span>													<span>${(reservation.location.pricePerNight * reservation.numberOfNights).toFixed(2)}</span>												</div>												<div className="flex justify-between">													<span className="font-semibold">Final price (incl. fees):</span>													<span>${(reservation.location.pricePerNight * reservation.numberOfNights * 1.2).toFixed(2)}</span>												</div>											</>										)}										<div className="mt-4">											<Link to={`/reservations/${reservation.id}/services`} className="btn btn-primary w-full">												View Services											</Link>											{shouldShowPriceInfo(userStatus) && (												<PDFDownloadLink													document={<ReservationPDF reservation={reservation} />}													fileName={`reservation-${reservation.id}.pdf`}													className="btn btn-secondary w-full mt-2"												>													{({ blob, url, loading, error }) =>														loading ? 'Generating PDF...' : 'Print PDF'													}												</PDFDownloadLink>											)}										</div>									</div>								</CardBody>							</BigCard>						))}					</div>				)}			</main>			<Footer />		</div>	);};export default UserReservations;