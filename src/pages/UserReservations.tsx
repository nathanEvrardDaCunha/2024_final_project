import React, { useState, useEffect } from 'react';import Header from "../components/layout/header/Header";import Footer from "../components/layout/Footer";import BigCard from "../components/common/cards/BigCard";import CardBody from "../components/common/cards/CardBody";import CardTitleCentered from "../components/common/cards/CardTitleCentered";import { getUserReservations } from "../hooks/adminLocationService.tsx";interface ReservationWithLocation {	id: number;	startDate: string;	endDate?: string;	numberOfNights: number;	numberOfPeople: number;	location: {		title: string;		pricePerNight?: number;	};}const UserReservations: React.FC = () => {	const [reservations, setReservations] = useState<ReservationWithLocation[]>([]);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);		useEffect(() => {		const fetchReservations = async () => {			try {				const data = await getUserReservations();				console.log('Fetched reservations:', data); // Log the fetched data				setReservations(data);				setIsLoading(false);			} catch (err) {				console.error('Error fetching reservations:', err); // Log any errors				setError(err instanceof Error ? err.message : 'An unknown error occurred');				setIsLoading(false);			}		};				fetchReservations();	}, []);		if (isLoading) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<span className="loading loading-spinner loading-lg text-primary"></span>		</div>	);		if (error) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<div className="alert alert-error shadow-lg max-w-md">				<div>					<svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>					<span>{error}</span>				</div>			</div>		</div>	);		return (		<div className="flex flex-col min-h-screen bg-gray-100">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-4xl font-bold text-center mb-12 text-gray-800">My Reservations</h1>				{reservations.length === 0 ? (					<p className="text-center text-xl text-gray-600">You don't have any reservations yet.</p>				) : (					<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">						{reservations.map((reservation) => (							<BigCard key={reservation.id} className="shadow-xl">								<CardBody>									<CardTitleCentered text={reservation.location?.title || `Reservation #${reservation.id}`} className="text-xl mb-4" />									<div className="space-y-3">										<div className="flex justify-between">											<span className="font-semibold">Check-in:</span>											<span>{new Date(reservation.startDate).toLocaleDateString()}</span>										</div>										{reservation.endDate && (											<div className="flex justify-between">												<span className="font-semibold">Check-out:</span>												<span>{new Date(reservation.endDate).toLocaleDateString()}</span>											</div>										)}										<div className="flex justify-between">											<span className="font-semibold">Nights:</span>											<span>{reservation.numberOfNights}</span>										</div>										<div className="flex justify-between">											<span className="font-semibold">Guests:</span>											<span>{reservation.numberOfPeople}</span>										</div>										{reservation.location?.pricePerNight && (											<div className="flex justify-between">												<span className="font-semibold">Price per night:</span>												<span>${reservation.location.pricePerNight.toFixed(2)}</span>											</div>										)}										{reservation.location?.pricePerNight && (											<div className="flex justify-between">												<span className="font-semibold">Total price:</span>												<span>${(reservation.location.pricePerNight * reservation.numberOfNights).toFixed(2)}</span>											</div>										)}									</div>								</CardBody>							</BigCard>						))}					</div>				)}			</main>			<Footer />		</div>	);};export default UserReservations;