import React, { useState, useEffect } from 'react';import { useParams } from 'react-router-dom';import { Reservation } from '../types/adminLocationType';import { getRentorReservations, deleteReservation } from '../hooks/adminLocationService';import Header from '../components/layout/header/Header';import Footer from '../components/layout/Footer';const RentorReservations: React.FC = () => {	const { id } = useParams<{ id: string }>();	const [reservations, setReservations] = useState<Reservation[]>([]);	const [isLoading, setIsLoading] = useState(true);	const [error, setError] = useState<string | null>(null);		useEffect(() => {		const fetchReservations = async () => {			if (id) {				try {					setIsLoading(true);					const fetchedReservations = await getRentorReservations(parseInt(id));					setReservations(fetchedReservations);				} catch (error) {					console.error('Error fetching reservations:', error);					setError('Failed to load reservations. Please try again later.');				} finally {					setIsLoading(false);				}			}		};		fetchReservations();	}, [id]);		const handleDeleteReservation = async (reservationId: number) => {		try {			await deleteReservation(reservationId);			setReservations(reservations.filter(res => res.id !== reservationId));		} catch (error) {			console.error('Error deleting reservation:', error);			setError('Failed to delete reservation. Please try again.');		}	};		const calculateEndDate = (startDate: Date, numberOfNights: number) => {		const endDate = new Date(startDate);		endDate.setDate(endDate.getDate() + numberOfNights);		return endDate;	};		if (isLoading) {		return <div>Loading...</div>;	}		if (error) {		return <div>{error}</div>;	}		return (		<div className="flex flex-col min-h-screen bg-base-200">			<Header />			<main className="flex-grow container mx-auto px-4 py-8">				<h1 className="text-2xl font-bold mb-4">My Reservations as Rentor</h1>				<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">					{reservations.map(reservation => {						const startDate = new Date(reservation.startDate);						const endDate = calculateEndDate(startDate, reservation.numberOfNights);						return (							<div key={reservation.id} className="card bg-base-100 shadow-xl">								<div className="card-body">									<h2 className="card-title">Reservation #{reservation.id}</h2>									<p>Start Date: {startDate.toLocaleDateString()}</p>									<p>End Date: {endDate.toLocaleDateString()}</p>									<div className="card-actions justify-end">										<button											className="btn btn-error"											onClick={() => handleDeleteReservation(reservation.id)}										>											Delete my Reservation										</button>									</div>								</div>							</div>						);					})}				</div>			</main>			<Footer />		</div>	);};export default RentorReservations;