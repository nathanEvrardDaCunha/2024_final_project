import React, { useState, useMemo } from 'react';import { useParams, useNavigate } from 'react-router-dom';import Header from "../components/layout/header/Header";import Footer from "../components/layout/Footer";import BigCard from "../components/common/cards/BigCard";import CardBody from "../components/common/cards/CardBody";import CardTitleCentered from "../components/common/cards/CardTitleCentered";import useUpdateLocation from "../hooks/useUpdateLocation";import { PerkType } from "../types/adminLocationType";const UpdateLocation: React.FC = () => {	const { locationId } = useParams();	const navigate = useNavigate();	const {		location,		uploadImageAsImage,		removeDocument,		updatePerks,		isLoading,		error	} = useUpdateLocation(Number(locationId));	const [selectedFiles, setSelectedFiles] = useState<File[]>([]);	const [selectedPerks, setSelectedPerks] = useState<PerkType[]>([]);		const documents = useMemo(() => location?.documents || [], [location]);		const perkOptions: { value: PerkType; label: string }[] = [		{ value: 'KITCHEN', label: 'Kitchen' },		{ value: 'BATHROOM', label: 'Bathroom' },		{ value: 'WASHING_MACHINE', label: 'Washing Machine' },		{ value: 'WIFI', label: 'WiFi' },		{ value: 'AIR_CONDITIONING', label: 'Air Conditioning' },		{ value: 'HOT_WATER', label: 'Hot Water' },		{ value: 'SMOKE_DETECTOR', label: 'Smoke Detector' },		{ value: 'HEATING', label: 'Heating' },		{ value: 'PARKING', label: 'Parking' },		{ value: 'TELEVISION', label: 'Television' },		{ value: 'WORKSPACE', label: 'Workspace' },		{ value: 'SWIMMING_POOL', label: 'Swimming Pool' },		{ value: 'OTHERS', label: 'Others' },	];		if (isLoading) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<span className="loading loading-spinner loading-lg text-primary"></span>		</div>	);		if (error) return (		<div className="min-h-screen flex justify-center items-center bg-gray-100">			<div className="alert alert-error shadow-lg max-w-md">				<div>					<svg xmlns="http://www.w3.org/2000/svg" className="stroke-current flex-shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>					<span>{error}</span>				</div>			</div>		</div>	);		const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {		if (event.target.files) {			setSelectedFiles(Array.from(event.target.files));		}	};		const handleUpload = async () => {		for (const file of selectedFiles) {			await uploadImageAsImage(file);		}		setSelectedFiles([]);	};		const handleRemoveDocument = async (documentId: number) => {		await removeDocument(documentId);	};		const handlePerkChange = (perk: PerkType) => {		setSelectedPerks(prevPerks =>			prevPerks.includes(perk)				? prevPerks.filter(p => p !== perk)				: [...prevPerks, perk]		);	};		const handleUpdatePerks = async () => {		try {			await updatePerks(selectedPerks);			alert('Perks updated successfully');		} catch (error) {			console.error('Failed to update perks:', error);			alert('Failed to update perks. Please try again.');		}	};		return (		<div className="flex flex-col min-h-screen bg-gray-100">			<Header />			<main className="flex-grow container mx-auto px-4 py-8 flex flex-col justify-between">				<h1 className="text-4xl font-bold text-center mb-12 text-gray-800">Update Location: {location?.title}</h1>								<div className="flex flex-col lg:flex-row gap-8 justify-center items-start mb-12">					<BigCard className="shadow-xl flex-1 w-full lg:w-1/2">						<CardBody>							<CardTitleCentered text="Update Images" className="text-xl mb-4" />							<div className="space-y-4">								<input type="file" className="file-input file-input-bordered w-full" onChange={handleFileChange} multiple accept="image/*" />								<button className="btn btn-primary w-full" onClick={handleUpload} disabled={selectedFiles.length === 0}>									Upload Selected Files								</button>								{documents.filter(doc => doc.documentType === 'IMAGES').length > 0 && (									<div>										<h3 className="font-semibold mb-2">Current Images:</h3>										<ul className="list-disc list-inside">											{documents.filter(doc => doc.documentType === 'IMAGES').map((doc) => (												<li key={doc.id} className="flex justify-between items-center">													<span>{doc.filename}</span>													<button														onClick={() => handleRemoveDocument(doc.id)}														className="btn btn-sm btn-error"													>														Remove													</button>												</li>											))}										</ul>									</div>								)}							</div>						</CardBody>					</BigCard>					<BigCard className="shadow-xl flex-1 w-full lg:w-1/2">						<CardBody>							<CardTitleCentered text="Update Perks" className="text-xl mb-4" />							<div className="space-y-4">								<div className="grid grid-cols-2 md:grid-cols-3 gap-4">									{perkOptions.map(perk => (										<label key={perk.value} className="flex items-center space-x-2">											<input												type="checkbox"												className="checkbox"												checked={selectedPerks.includes(perk.value)}												onChange={() => handlePerkChange(perk.value)}											/>											<span>{perk.label}</span>										</label>									))}								</div>								<button									className="btn btn-primary w-full"									onClick={handleUpdatePerks}									disabled={selectedPerks.length === 0}								>									Update Perks								</button>							</div>						</CardBody>					</BigCard>				</div>								<div className="w-full max-w-md mx-auto">					<button						className="btn btn-success w-full"						onClick={() => navigate('/locations')}					>						Back to Published Locations					</button>				</div>			</main>			<Footer />		</div>	);};export default UpdateLocation;