import React, { useState, useEffect } from 'react';import estimateLocationFormHook from "../hooks/estimateLocationFormHook";import FormControl from "../components/common/forms/FormControl";import Label from "../components/common/forms/Label";import WarningMessage from "../components/common/WarningMessage";import SubmitButton from "../components/common/forms/SubmitButton";import Input from "../components/common/forms/Input";import ErrorMessage from "../components/common/ErrorMessage";import Select from "../components/common/forms/Select";import SuccessMessage from "../components/common/SucessMessage";import {SavedLocation} from "../types/estimateLocationFormType.tsx";import StripeCheckoutRenterButton from "../components/common/forms/StripeCheckoutRenterButton.tsx";const EstimateLocationForm: React.FC = () => {	const {		formData,		errors,		isSubmitting,		attemptedSubmit,		estimationError,		estimatedPrice,		saveSuccess,		handleChange,		handleSubmit,		saveLocation	} = estimateLocationFormHook();		const [finalPrice, setFinalPrice] = useState<number | null>(null);	const [locationId, setLocationId] = useState<number | null>(null);		useEffect(() => {		console.log('saveSuccess state changed:', saveSuccess);		console.log('estimationError state changed:', estimationError);		console.log('LocationId updated:', locationId);	}, [saveSuccess, estimationError, locationId]);		useEffect(() => {		console.log('estimatedPrice changed:', estimatedPrice);	}, [estimatedPrice]);		const handleFinalPriceChange = (e: React.ChangeEvent<HTMLInputElement>) => {		setFinalPrice(Number(e.target.value));	};		const handleSaveLocation = async () => {		console.log('Save Location button clicked');		if (finalPrice !== null) {			console.log('Calling saveLocation with price:', finalPrice);			try {				const savedLocation: SavedLocation | null = await saveLocation(finalPrice);				console.log('Full savedLocation object:', savedLocation);				if (savedLocation && savedLocation.id) {					console.log('Setting locationId to:', savedLocation.id);					setLocationId(savedLocation.id);				} else {					console.error('savedLocation or savedLocation.id is null or undefined');					console.error('savedLocation:', savedLocation);				}			} catch (error) {				console.error('Error saving location:', error);			}		} else {			console.log('Final price is null, not saving');		}	};		return (		<form onSubmit={handleSubmit} className="space-y-4">			<FormControl>				<Label htmlFor="surfaceM2" text="Surface (m²)" />				<Input					type="number"					id="surfaceM2"					name="surfaceM2"					value={formData.surfaceM2}					onChange={handleChange}					placeholder="Enter surface in m²"				/>				{attemptedSubmit && errors.surfaceM2 && <WarningMessage message={errors.surfaceM2} />}			</FormControl>			<FormControl>				<Label htmlFor="numberOfBed" text="Number of beds" />				<Input					type="number"					id="numberOfBed"					name="numberOfBed"					value={formData.numberOfBed}					onChange={handleChange}					placeholder="Enter number of beds"				/>				{attemptedSubmit && errors.numberOfBed && <WarningMessage message={errors.numberOfBed} />}			</FormControl>			<FormControl>				<Label htmlFor="maxNumberOfPerson" text="Max number of persons" />				<Input					type="number"					id="maxNumberOfPerson"					name="maxNumberOfPerson"					value={formData.maxNumberOfPerson}					onChange={handleChange}					placeholder="Enter max number of persons"				/>				{attemptedSubmit && errors.maxNumberOfPerson && <WarningMessage message={errors.maxNumberOfPerson} />}			</FormControl>			<FormControl>				<Label htmlFor="country" text="Country" />				<Input					type="text"					id="country"					name="country"					value={formData.country}					onChange={handleChange}					placeholder="Enter country"				/>				{attemptedSubmit && errors.country && <WarningMessage message={errors.country} />}			</FormControl>			<FormControl>				<Label htmlFor="street" text="Street" />				<Input					type="text"					id="street"					name="street"					value={formData.street}					onChange={handleChange}					placeholder="Enter street address"				/>				{attemptedSubmit && errors.street && <WarningMessage message={errors.street} />}			</FormControl>			<FormControl>				<Label htmlFor="locationType" text="Location Type" />				<Select					id="locationType"					name="locationType"					value={formData.locationType}					onChange={handleChange}				>					<option value="">Select a location type</option>					<option value="APARTMENT">Apartment</option>					<option value="HOUSE">House</option>					<option value="VILLA">Villa</option>					<option value="CABIN">Cabin</option>					<option value="STUDIO">Studio</option>					<option value="LOFT">Loft</option>				</Select>				{attemptedSubmit && errors.locationType && <WarningMessage message={errors.locationType} />}			</FormControl>			<FormControl>				<Label htmlFor="locationGoodType" text="Location Good Type" />				<Select					id="locationGoodType"					name="locationGoodType"					value={formData.locationGoodType}					onChange={handleChange}				>					<option value="">Select a location good type</option>					<option value="ENTIRE_PLACE">Entire Place</option>					<option value="PRIVATE_ROOM">Private Room</option>					<option value="SHARED_ROOM">Shared Room</option>				</Select>				{attemptedSubmit && errors.locationGoodType && <WarningMessage message={errors.locationGoodType} />}			</FormControl>			<FormControl>				<Label htmlFor="title" text="Title" />				<Input					type="text"					id="title"					name="title"					value={formData.title}					onChange={handleChange}					placeholder="Enter location title"				/>				{attemptedSubmit && errors.title && <WarningMessage message={errors.title} />}			</FormControl>			<FormControl>				<Label htmlFor="description" text="Description" />				<Input					type="text"					id="description"					name="description"					value={formData.description}					onChange={handleChange}					placeholder="Enter location description"				/>				{attemptedSubmit && errors.description && <WarningMessage message={errors.description} />}			</FormControl>						<SubmitButton text="Estimate Price" disabled={isSubmitting} />						{estimationError && (				<ErrorMessage message={estimationError} />			)}			{saveSuccess && (				<SuccessMessage message={saveSuccess} />			)}						{estimatedPrice !== null && (				<div className="mt-4">					<h3 className="text-lg font-semibold">Recommended Price per Night</h3>					<p className="text-xl font-bold">${estimatedPrice.toFixed(2)}</p>										<FormControl>						<Label htmlFor="finalPrice" text="Your Final Price per Night" />						<Input							type="number"							id="finalPrice"							name="finalPrice"							value={finalPrice || ''}							onChange={handleFinalPriceChange}							placeholder="Enter your final price"						/>					</FormControl>										<button						type="button"						className="btn btn-primary"						onClick={handleSaveLocation}						disabled={isSubmitting || finalPrice === null}					>						Save Location					</button>										{locationId && (						<StripeCheckoutRenterButton locationId={locationId} />					)}				</div>			)}		</form>	);};export default EstimateLocationForm;