import * as Yup from 'yup';import { calculateAge } from '../utils/dateUtils.tsx';export const validationSchema = Yup.object().shape({	email: Yup.string()		.email('Invalid email address')		.required('Email is required'),	firstname: Yup.string()		.matches(/^[a-zA-Z]+$/, 'First name should only contain letters')		.required('First name is required'),	lastname: Yup.string()		.matches(/^[a-zA-Z]+$/, 'Last name should only contain letters')		.required('Last name is required'),	birthDate: Yup.date()		.transform((value, originalValue) => {			return originalValue ? new Date(originalValue) : null;		})		.typeError('Please enter a valid date')		.max(new Date(), 'Birth date cannot be in the future')		.test('age', 'You must be at least 18 years old to register', function(value) {			return value ? calculateAge(value) >= 18 : false;		})		.nullable()		.required('Birth date is required'),	password: Yup.string()		.min(8, 'Password must be at least 8 characters')		.matches(/[a-zA-Z]/, 'Password must contain at least one letter')		.matches(/[0-9]/, 'Password must contain at least one number')		.matches(/[!@#$%^&*(),.?":{}|<>]/, 'Password must contain at least one special character')		.required('Password is required'),	phoneNumber: Yup.string()		.matches(/^\+\d{2}[0-9]{9}$/, 'Phone number must be in the format: +XXXXXXXXXXXX')		.required('Phone number is required'),	isRenter: Yup.boolean(),});