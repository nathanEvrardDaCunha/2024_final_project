import * as Yup from 'yup';export const validationSchema = Yup.object().shape({	street: Yup.string().required('Street is required'),	country: Yup.string().required('Country is required'),	conciergeryType: Yup.string().oneOf(['ALL_IN_ONE', 'NO_PRESTATION', 'MAINTENANCE_ONLY', 'PROMOTIONAL_ONLY'], 'Invalid conciergery type').required('Conciergery type is required'),	houseType: Yup.string().oneOf(['OLD_HOUSE', 'APPARTMENT', 'SECONDARY_RESIDENCE', 'PRIMARY_RESIDENCE'], 'Invalid house type').required('House type is required'),	locationType: Yup.string().oneOf(['EMPTY_RENTAL', 'FURNISHED_RENTAL', 'CAVATION_RENTAL'], 'Invalid location type').required('Location type is required'),	numberOfBedroom: Yup.number().transform((value) => (isNaN(value) ? undefined : value))		.positive('Number of bedrooms must be positive')		.integer('Number of bedrooms must be an integer')		.required('Number of bedrooms is required'),	maximumNumberOfPeople: Yup.number().transform((value) => (isNaN(value) ? undefined : value))		.positive('Maximum number of people must be positive')		.integer('Maximum number of people must be an integer')		.required('Maximum number of people is required'),	surfaceM2: Yup.number().transform((value) => (isNaN(value) ? undefined : value))		.positive('Surface area must be positive')		.required('Surface area is required'),	price: Yup.number().transform((value) => (isNaN(value) ? undefined : value))		.positive('Price must be positive')		.required('Price is required'),});