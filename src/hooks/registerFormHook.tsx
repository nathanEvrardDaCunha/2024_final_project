import React, { useState } from 'react';import { validationSchema } from '../validations/registerFormValidation.tsx';import { FormData, FormErrors } from '../types/registerFormType.tsx';const registerFormHook = () => {	const [formData, setFormData] = useState<FormData>({		email: '',		firstname: '',		lastname: '',		birthDate: '',		password: '',		phoneNumber: ''	});		const [errors, setErrors] = useState<FormErrors>({});	const [isSubmitting, setIsSubmitting] = useState(false);	const [attemptedSubmit, setAttemptedSubmit] = useState(false);		const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {		const { name, value } = e.target;		setFormData(prevState => ({			...prevState,			[name]: value		}));				if (errors[name as keyof FormErrors]) {			setErrors(prevErrors => ({				...prevErrors,				[name]: undefined			}));		}	};		const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setIsSubmitting(true);		setAttemptedSubmit(true);				try {			await validationSchema.validate(formData, { abortEarly: false });			const response = await fetch('http://localhost:3000/auth/register', {				method: 'POST',				headers: {					'Content-Type': 'application/json',				},				body: JSON.stringify(formData),			});						if (!response.ok) {				throw new Error('Registration failed');			}						const data = await response.json();			console.log('Registration successful:', data);			setErrors({});		} catch (error) {			if (error instanceof Error) {				const newErrors: FormErrors = {};				if ('inner' in error) {					(error as any).inner.forEach((err: any) => {						if (err.path) {							newErrors[err.path as keyof FormErrors] = err.message;						}					});				}				setErrors(newErrors);			} else {				console.error('Registration error:', error);			}		} finally {			setIsSubmitting(false);		}	};		return { formData, errors, isSubmitting, attemptedSubmit, handleChange, handleSubmit };};export default registerFormHook;