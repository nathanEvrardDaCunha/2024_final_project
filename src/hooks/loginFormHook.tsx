import { useState } from 'react';import { useNavigate } from 'react-router-dom';import { setToken, setUserStatus, setUserId, setUserEmail } from '../utils/jwt';interface FormData {	email: string;	password: string;}interface FormErrors {	email?: string;	password?: string;}const loginFormHook = () => {	const [formData, setFormData] = useState<FormData>({ email: '', password: '' });	const [errors, setErrors] = useState<FormErrors>({});	const [isSubmitting, setIsSubmitting] = useState(false);	const [attemptedSubmit, setAttemptedSubmit] = useState(false);	const [loginError, setLoginError] = useState<string | null>(null);	const navigate = useNavigate();		const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {		const { name, value } = e.target;		setFormData(prevState => ({ ...prevState, [name]: value }));		if (attemptedSubmit) {			validate({ ...formData, [name]: value });		}	};		const validate = (data: FormData): boolean => {		let errors: FormErrors = {};		if (!data.email) {			errors.email = 'Email is required';		} else if (!/\S+@\S+\.\S+/.test(data.email)) {			errors.email = 'Email is invalid';		}		if (!data.password) {			errors.password = 'Password is required';		}		setErrors(errors);		return Object.keys(errors).length === 0;	};		const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setAttemptedSubmit(true);				if (validate(formData)) {			setIsSubmitting(true);			try {				const response = await fetch(`${import.meta.env.VITE_API_URL}/auth/login`, {					method: 'POST',					headers: { 'Content-Type': 'application/json' },					body: JSON.stringify(formData),				});								if (!response.ok) {					throw new Error('Login failed');				}								const data = await response.json();				setToken(data.token);				setUserStatus(data.userStatus);				setUserId(data.userId.toString());				setUserEmail(data.email);				navigate('/dashboard');			} catch (error) {				setLoginError('Invalid email or password');			} finally {				setIsSubmitting(false);			}		}	};		return {		formData,		errors,		isSubmitting,		attemptedSubmit,		loginError,		handleChange,		handleSubmit	};};export default loginFormHook;