import { getToken } from '../utils/jwt';import { Location } from '../types/adminLocationType.tsx';export const getLocationsToReview = async (): Promise<Location[]> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		const response = await fetch('http://localhost:3000/location/review', {		headers: {			'Authorization': `Bearer ${token}`		}	});		if (!response.ok) {		throw new Error('Failed to fetch locations');	}		return response.json();};export const getLocation = async (locationId: number): Promise<Location> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		const response = await fetch(`http://localhost:3000/location/${locationId}`, {		headers: {			'Authorization': `Bearer ${token}`		}	});		if (!response.ok) {		throw new Error('Failed to fetch location');	}		return response.json();};export const uploadLocationImage = async (locationId: number, file: File): Promise<Location> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		const formData = new FormData();	formData.append('image', file);		const response = await fetch(`http://localhost:3000/location/${locationId}/upload`, {		method: 'POST',		headers: {			'Authorization': `Bearer ${token}`		},		body: formData	} as RequestInit);		if (!response.ok) {		throw new Error('Failed to upload image');	}		return response.json();};export const completeLocationPaperwork = async (locationId: number): Promise<Location> => {	const token = getToken();	if (!token) {		throw new Error('No authentication token found');	}		const response = await fetch(`http://localhost:3000/location/${locationId}/complete`, {		method: 'POST',		headers: {			'Authorization': `Bearer ${token}`,			'Content-Type': 'application/json'		}	});		if (!response.ok) {		throw new Error('Failed to complete paperwork');	}		return response.json();};