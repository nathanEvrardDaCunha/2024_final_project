import { useState } from 'react';import { validationSchema } from '../validations/locationFormValidation';import { FormData, FormErrors } from '../types/locationFormType';import { getToken, removeToken } from '../utils/jwt';import { useNavigate } from 'react-router-dom';const createLocationFormHook = () => {	const [formData, setFormData] = useState<FormData>({		street: '',		country: '',		conciergeryType: '',		houseType: '',		locationType: '',		numberOfBedroom: '',		maximumNumberOfPeople: '',		surfaceM2: '',		price: '',	});		const [errors, setErrors] = useState<FormErrors>({});	const [isSubmitting, setIsSubmitting] = useState(false);	const [attemptedSubmit, setAttemptedSubmit] = useState(false);	const navigate = useNavigate();		const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {		const { name, value } = e.target;		setFormData(prevState => ({			...prevState,			[name]: value		}));				if (errors[name as keyof FormErrors]) {			setErrors(prevErrors => ({				...prevErrors,				[name]: undefined			}));		}	};		const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {		e.preventDefault();		setIsSubmitting(true);		setAttemptedSubmit(true);				try {			const validatedData = await validationSchema.validate(formData, { abortEarly: false });			const token = getToken();						if (!token) {				throw new Error('No authentication token found. Please log in again.');			}						const response = await fetch('http://localhost:3000/locations', {				method: 'POST',				headers: {					'Content-Type': 'application/json',					'Authorization': `Bearer ${token}`				},				body: JSON.stringify(validatedData),			});						if (!response.ok) {				if (response.status === 401) {					removeToken();					navigate('/login');					throw new Error('Your session has expired. Please log in again.');				}				throw new Error('Location creation failed');			}						const data = await response.json();			console.log('Location created successfully:', data);			setErrors({});			return { success: true, data };		} catch (error) {			if (error instanceof Error) {				const newErrors: FormErrors = {};				if ('inner' in error) {					(error as any).inner.forEach((err: any) => {						if (err.path) {							newErrors[err.path as keyof FormErrors] = err.message;						}					});					setErrors(newErrors);				} else {					console.error('Location creation error:', error.message);					return { success: false, error: error.message };				}			} else {				console.error('An unknown error occurred:', error);				return { success: false, error: 'An unknown error occurred' };			}		} finally {			setIsSubmitting(false);		}	};		return { formData, errors, isSubmitting, attemptedSubmit, handleChange, handleSubmit };};export default createLocationFormHook;